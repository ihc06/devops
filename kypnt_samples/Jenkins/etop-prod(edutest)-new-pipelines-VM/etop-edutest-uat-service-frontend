pipeline {   
    agent any
    tools {
        nodejs "NodeJS 18.4.0"
    } 
    
    environment {
        GITHUB_REPO = "https://github.com/kypnt/kypnt-etop-clt.git"
        GITHUB_BRANCH = "*/master" 
        GITHUB_INFRA = "https://github.com/kypnt/infrastructure.git"
        INFRA_BRANCH = "*/main"
        SERVICE_NAME="etop-ui-service"
        DOCKERHUB_CREDENTIALS=credentials('dockerhub')
        
    }
    
    stages {
        stage('Clone Code from Github') {
            steps {
                //git branch: 'develop', url: 'https://github.com/kypnt/com.kypnt.rec-tool.rec-svc.git'
                checkout([$class: 'GitSCM', branches: [[name: GITHUB_BRANCH]], extensions: [], userRemoteConfigs: [[credentialsId: 'omeraritoken', url: GITHUB_REPO]]])
                
                // infrastructure repo
                checkout([
                    $class: 'GitSCM', 
                    branches: [[name: INFRA_BRANCH]], 
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'infrastructure']], 
                    userRemoteConfigs: [[credentialsId: 'omeraritoken', 
                    url: GITHUB_INFRA]]])
            }
        }
        stage('Getting Github Commit ID') {
            steps {
                script {
                    // Checkout the repository and save the resulting metadata
                    def scmVars = checkout([$class: 'GitSCM', branches: [[name: GITHUB_BRANCH]], extensions: [], userRemoteConfigs: [[credentialsId: 'omeraritoken', url: GITHUB_REPO]]])
                    env.commitHash = scmVars.GIT_COMMIT.take(7)
                    echo "commitHash"
                    echo "${commitHash}"
                    echo "scmVars.GIT_COMMIT"
                    echo "${scmVars.GIT_COMMIT}"
                }
            }
        }
        stage("Frontend Build") {
            steps {
                script {
                    nodejs('NodeJS 18.4.0'){
                        sh 'yarn cache clean && yarn install'
                        sh 'yarn next build && yarn next export'
                    }
                }
            }
        }
        stage('Docker Login') {
            steps {
               sh 'echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin'
            }
        }
        stage('Build Container Image and Push to Dockerhub') {
            steps {
                echo "Build Container Image..."
                sh "docker build --file=Dockerfile --tag=${DOCKERHUB_CREDENTIALS_USR}/${SERVICE_NAME}:${commitHash} --build-arg COMMIT=${commitHash} --rm=true --no-cache ."
                echo "Tagged Image..."
                sh "docker tag ${DOCKERHUB_CREDENTIALS_USR}/${SERVICE_NAME}:${commitHash} ${DOCKERHUB_CREDENTIALS_USR}/${SERVICE_NAME}:latest"
                echo "Push image to Dockerhub..."
                sh "docker push ${DOCKERHUB_CREDENTIALS_USR}/${SERVICE_NAME}:${commitHash}"
                sh "docker push ${DOCKERHUB_CREDENTIALS_USR}/${SERVICE_NAME}:latest"
		        //sh "docker rmi \$(docker images | grep '${SERVICE_NAME}') || true"
                //sh "docker image prune -f"
           }
        }
        stage ('K8S Deploy') {
          steps {
            script {
                withKubeConfig([credentialsId: 'EtopAKS_New', serverUrl: '']) {
                sh 'echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin'
                //sh 'kubectl delete -f /var/lib/jenkins/workspace/azure-etop-frontend-test/infrastructure/etop/kubernetes/frontend-service/frontend-service_deployment.yaml'
                sh ('kubectl apply -f /var/lib/jenkins/workspace/etop-uat-frontend/infrastructure/etop-examinion/kubernetes/frontend-service/frontend-service_deployment.yaml -n etop-prod')
                //sh "kubectl set image deployment/frontend-service-deploy frontend-server=kypnt/frontend-server:latest --record=true"
                sh ('kubectl rollout restart deploy frontend-service-deploy -n etop-prod')
                }                
            }
        }
    }
  }
}